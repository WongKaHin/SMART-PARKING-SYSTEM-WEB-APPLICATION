<!DOCTYPE html>
<html>
  <head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <meta http-equiv="refresh" content="60">
    <title>Carpark System</title>
  </head>
  <body>
    <%- include('partials/userHeader') %>
    <div class="container my-5">
      <h1 class="text-center mb-4">Carpark Information</h1>

      <!-- Search bar -->
      <div class="d-flex mx-auto" role="search" style="width: 50%;">
        <input class="form-control me-2" id="searchInput" type="search" placeholder="Search Carpark Name" aria-label="Search" />
        <button class="btn btn-outline-success" id="searchButton">Search</button>
      </div>

      <!-- Carpark type selection -->
      <div class="row mt-3">
        <div class="col-md-6 offset-md-3">
          <select id="carpark-type" class="form-select" onchange="fetchData()">
            <option value="privateCar">Private Car</option>
            <option value="HGV">HGV</option>
            <option value="LGV">LGV</option>
            <option value="coach">Coach</option>
            <option value="motorCycle">MotorCycle</option>
          </select>
        </div>
      </div>

      <!-- Carpark table -->
      <div class="table-responsive mt-4">
        <table class="table table-striped table-bordered text-center">
          <thead class="table-dark" id="table-headers">
            <tr>
              <th onclick="sortTable('Carpark Name')">Carpark Name ▲▼</th>
              <th>Favorite</th>
            </tr>
          </thead>
          <tbody id="table-body"></tbody>
        </table>
      </div>
    </div>

    <script>
      const fieldDefinitions = {
        privateCar: ["vacancy", "vacancyEV", "vacancyDIS"],
        HGV: ["vacancy", "vacancyEV"],
        LGV: ["vacancy", "vacancyEV"],
        coach: ["vacancy"],
        motorCycle: ["vacancy"],
      };

      let currentSortField = "";
      let sortDirection = 1;

      async function fetchData(query = "") {
        const type = document.getElementById("carpark-type").value;
        const response = await fetch(`/carpark/${type}${query}`);
        const carparks = await response.json();

        updateTableHeaders(type);
        updateTableBody(carparks, type);
      }

      function updateTableHeaders(type) {
        const headers = ["Carpark Name", "Favorite", ...fieldDefinitions[type], "Last Upload Date"];
        const headerRow = document.getElementById("table-headers");
        headerRow.innerHTML = headers.map(header => `<th onclick="sortTable('${header}')">${header} ▲▼</th>`).join("");
      }

      function updateTableBody(carparks, type) {
        const tableBody = document.getElementById("table-body");
        const fields = fieldDefinitions[type];

        tableBody.innerHTML =
          carparks.length > 0
            ? carparks.map((carpark, index) => `
              <tr>
                <td><a href="/detail/${carpark._id}">${carpark.name}</a></td>
                <td><button class="btn btn-light" data-id="${carpark._id}" onclick="toggleFavorite('${carpark._id}')">☆</button></td>
                ${fields.map(field => `<td>${carpark[type]?.[field] ?? "--"}</td>`).join("")}
                <td>${formatDate(carpark.lastUploadDate)}</td>
              </tr>
            `).join("")
            : `<tr><td colspan="${fields.length + 3}" class="text-center">No results found</td></tr>`;
        
        initializeFavoriteButtons();
      }

      function sortTable(field) {
        const type = document.getElementById("carpark-type").value;
        const tableBody = document.getElementById("table-body");
        const rows = Array.from(tableBody.querySelectorAll("tr"));

        if (currentSortField === field) {
          sortDirection *= -1;
        } else {
          currentSortField = field;
          sortDirection = 1;
        }

        const sortedRows = rows.sort((a, b) => {
          const aValue = getFieldValue(a, field, type);
          const bValue = getFieldValue(b, field, type);

          if (aValue < bValue) return -1 * sortDirection;
          if (aValue > bValue) return 1 * sortDirection;
          return 0;
        });

        tableBody.innerHTML = "";
        sortedRows.forEach(row => tableBody.appendChild(row));
        updateHeaderArrows();
      }

      function getFieldValue(row, field, type) {
        const cells = row.querySelectorAll("td");

        if (field === "Carpark Name") {
          // 對於名稱字段，直接返回文本，轉換為小寫方便排序
          return cells[0]?.textContent.trim().toLowerCase() || "";
        }

        if (field === "Last Upload Date") {
          // 提取並轉換日期為時間戳，用於排序
          const dateValue = cells[cells.length - 1]?.textContent.trim();
          return new Date(dateValue).getTime() || 0; // 如果無效日期，默認為 0
        }

        // 處理其他數字類字段 (e.g., "vacancy")
        const fieldIndex = fieldDefinitions[type]?.indexOf(field) + 2; // 動態字段偏移量
        const value = cells[fieldIndex]?.textContent.trim();

        if (value === "--") return -1; // 空值處理，設為排序最低值
        return parseInt(value) || 0; // 解析數字類型，無效值默認為 0
      }


      function updateHeaderArrows() {
        const headers = document.querySelectorAll("th");
        headers.forEach(header => {
          const baseText = header.textContent.split(" ")[0];
          if (header.textContent.includes(currentSortField)) {
            header.textContent = `${baseText} ${(sortDirection === 1 ? "▲" : "▼")}`;
          } else {
            header.textContent = `${baseText} ▲▼`;
          }
        });
      }

      async function toggleFavorite(carparkId) {
        const button = document.querySelector(`button[data-id="${carparkId}"]`);
        const userId = "<%= data._id || '' %>";

        if (!userId) return alert("Please log in first!");

        const action = button.textContent === "☆" ? "POST" : "DELETE";
        fetch(`/favorite/${carparkId}`, {
          method: action,
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userId, carparkId }),
        })
          .then(response => {
            if (response.ok) {
              button.textContent = action === "POST" ? "★" : "☆";
              button.classList.toggle("text-warning", action === "POST");
              alert(action === "POST" ? "Added to favorites!" : "Removed from favorites!");
            } else {
              throw new Error("Action failed.");
            }
          })
          .catch(() => alert("An error occurred. Please try again later."));
      }

      function initializeFavoriteButtons() {
        const buttons = document.querySelectorAll('button[data-id]');
        const favorites = <%- JSON.stringify(favorites) %>;
        buttons.forEach(button => {
          const carparkId = button.getAttribute("data-id");
          const isFav = favorites.some(fav => fav.carparkId === carparkId.toString());
          button.textContent = isFav ? "★" : "☆";
          button.classList.toggle("text-warning", isFav);
        });
      }

      document.getElementById("searchButton").addEventListener("click", () => {
        const searchValue = document.getElementById("searchInput").value.trim();
        const query = searchValue ? `/search?q=${searchValue}` : "";
        fetchData(query);
      });

      function formatDate(dateString) {
        const date = new Date(dateString);
        // 設置為香港時間（UTC+8）
        const hongKongTime = new Date(date.getTime());

        const year = hongKongTime.getFullYear();
        const month = String(hongKongTime.getMonth() + 1).padStart(2, '0');
        const day = String(hongKongTime.getDate()).padStart(2, '0');
        const hours = String(hongKongTime.getHours()).padStart(2, '0');
        const minutes = String(hongKongTime.getMinutes()).padStart(2, '0');
        const seconds = String(hongKongTime.getSeconds()).padStart(2, '0');

        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
      }


      fetchData();
    </script>
  </body>
</html>
